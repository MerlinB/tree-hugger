/** 
 * Tree Hugger - meta-tree-hugger [v0.0.2]
 * A Metanet tree traversal tool.
 * https://treehugger.bitpaste.app
 * Copyright Â© 2019 libitx
 */
!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(n=n||self).TreeHugger=t()}(this,function(){"use strict";function i(n,t){for(var e=0;e<t.length;e++){var i=t[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}function s(r){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{},t=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(o).filter(function(n){return Object.getOwnPropertyDescriptor(o,n).enumerable}))),t.forEach(function(n){var t,e,i;t=r,i=o[e=n],e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i})}return r}var n,f=(function(n,t){var e=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e)return e;throw new Error("unable to locate global object")}();n.exports=t=e.fetch,t.default=e.fetch.bind(e),t.Headers=e.Headers,t.Request=e.Request,t.Response=e.Response}(n={exports:{}},n.exports),n.exports),r=(f.Headers,f.Request,f.Response,{baseUrl:"https://metanaria.planaria.network/q/",headers:{},mapObject:function(n){return n},find:function(n,t){var e=this,i=1<arguments.length&&void 0!==t?t:{},r=this._buildQuery(n,i),o=this._encodeQuery(r),u=this.baseUrl+o,d=s({},this.headers,i.headers);return i.debug&&(console.log(r),console.log(u)),f(u,{headers:d}).then(function(n){return n.json()}).then(function(n){return n.metanet.map(e.mapObject)})},findSingle:function(n,t){var e=s({sort:{"blk.i":-1,i:-1},limit:1},n);return this.find(e,t).then(function(n){return n[0]||null})},findAll:function(n,t){var e=s({sort:{"blk.i":1,i:1}},n);return this.find(e,t)},_buildQuery:function(n,t){var e=1<arguments.length&&void 0!==t?t:{},i={v:3,q:n},r=Object.keys(e).filter(function(n){return["aggregate","project","sort","limit","skip"].includes(n)}).reduce(function(n,t){return n[t]=e[t],n},{});return Object.assign(i.q,r),e.find&&Object.assign(i.q.find,e.find),i.q.project&&Object.assign(i.q.project,{node:1,parent:1,ancestor:1,child:1}),i},_encodeQuery:function(n){var t=JSON.stringify(n);return"function"==typeof btoa?btoa(t):Buffer.from(t).toString("base64")}}),t=function(){function MetaNode(n){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,MetaNode),this.tx=n}return function(n,t,e){t&&i(n.prototype,t),e&&i(n,e)}(MetaNode,[{key:"root",value:function(n){if(this.isRoot)return this;var t={"node.id":this.tx.ancestor[0].id};return r.findSingle({find:t},n)}},{key:"parent",value:function(n){if(this.isRoot)return null;var t={"node.id":this.tx.parent.id};return r.findSingle({find:t},n)}},{key:"ancestors",value:function(n){var t=this;if(this.isRoot)return[];var e={find:{"node.id":{$in:this.tx.ancestor.map(function(n){return n.id}).filter(function(n){return n!==t.id})}},sort:{"blk.i":-1,i:-1}};return r.findAll(e,n)}},{key:"siblings",value:function(n){if(this.isRoot)return[];var t={$and:[{"parent.id":this.tx.parent.id},{"node.id":{$ne:this.id}}]};return r.findAll({find:t},n)}},{key:"children",value:function(n){if(this.isLeaf)return[];var t={"parent.id":this.id};return r.findAll({find:t},n)}},{key:"descendants",value:function(n){if(this.isLeaf)return[];var t={$and:[{"ancestor.id":this.id},{"node.id":{$ne:this.id}}]};return r.findAll({find:t},n)}},{key:"selfAndAncestors",value:function(n){var t=this;return this.ancestors(n).then(function(n){return[t].concat(n)})}},{key:"selfAndSiblings",value:function(n){var e=this;return this.siblings(n).then(function(n){var t=n.findIndex(function(n){return n.tx.blk.i>=e.tx.blk.i&&n.tx.i>e.tx.i});return n.splice(t,0,e),n})}},{key:"selfAndDescendants",value:function(n){var t=this;return this.descendants(n).then(function(n){return[t].concat(n)})}},{key:"id",get:function(){return this.tx.node.id}},{key:"txid",get:function(){return this.tx.node.tx}},{key:"address",get:function(){return this.tx.node.a}},{key:"isRoot",get:function(){return!this.tx.parent}},{key:"isChild",get:function(){return!this.isRoot}},{key:"isLeaf",get:function(){return!this.tx.child||!this.tx.child.length}},{key:"inputs",get:function(){return this.tx.in||[]}},{key:"outputs",get:function(){return this.tx.out||[]}},{key:"opReturn",get:function(){return this.outputs.find(function(n){return 106===n.b0.op})||null}}]),MetaNode}();return r.mapObject=function(n){return new t(n)},{db:r,findSingleNode:function(n,t){return this.db.findSingle(n,t)},findAllNodes:function(n,t){return this.db.findAll(n,t)},findNodeById:function(n,t){var e={"node.id":n};return this.db.findSingle({find:e},t)},findNodeByTxid:function(n,t){var e={"node.tx":n};return this.db.findSingle({find:e},t)},findNodesByAddress:function(n,t){var e={"node.a":n};return this.db.findAll({find:e},t)},findNodesByParentId:function(n,t){var e={"parent.id":n};return this.db.findAll({find:e},t)},findNodeAndDescendants:function(n,t){var e={$or:[{"node.id":n},{"ancestor.id":n}]};return this.db.findAll({find:e},t)}}});
